// Generated by view binder compiler. Do not edit!
package com.example.habitstracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.habitstracker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHabitEditingBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RadioButton badHabitButton;

  @NonNull
  public final ImageButton closeButton;

  @NonNull
  public final TextView colorValue;

  @NonNull
  public final EditText description;

  @NonNull
  public final RadioButton goodHabitButton;

  @NonNull
  public final EditText habitsName;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final RadioGroup radioGroup;

  @NonNull
  public final TextView repeatTimes;

  @NonNull
  public final Spinner repetitionPeriod;

  @NonNull
  public final EditText repetitionTimes;

  @NonNull
  public final Button saveButton;

  @NonNull
  public final Spinner spinnerPriority;

  @NonNull
  public final TextView titleIsRequiredMessage;

  private FragmentHabitEditingBinding(@NonNull ConstraintLayout rootView,
      @NonNull RadioButton badHabitButton, @NonNull ImageButton closeButton,
      @NonNull TextView colorValue, @NonNull EditText description,
      @NonNull RadioButton goodHabitButton, @NonNull EditText habitsName,
      @NonNull LinearLayout linearLayout, @NonNull RadioGroup radioGroup,
      @NonNull TextView repeatTimes, @NonNull Spinner repetitionPeriod,
      @NonNull EditText repetitionTimes, @NonNull Button saveButton,
      @NonNull Spinner spinnerPriority, @NonNull TextView titleIsRequiredMessage) {
    this.rootView = rootView;
    this.badHabitButton = badHabitButton;
    this.closeButton = closeButton;
    this.colorValue = colorValue;
    this.description = description;
    this.goodHabitButton = goodHabitButton;
    this.habitsName = habitsName;
    this.linearLayout = linearLayout;
    this.radioGroup = radioGroup;
    this.repeatTimes = repeatTimes;
    this.repetitionPeriod = repetitionPeriod;
    this.repetitionTimes = repetitionTimes;
    this.saveButton = saveButton;
    this.spinnerPriority = spinnerPriority;
    this.titleIsRequiredMessage = titleIsRequiredMessage;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHabitEditingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHabitEditingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_habit_editing, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHabitEditingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bad_habit_button;
      RadioButton badHabitButton = ViewBindings.findChildViewById(rootView, id);
      if (badHabitButton == null) {
        break missingId;
      }

      id = R.id.close_button;
      ImageButton closeButton = ViewBindings.findChildViewById(rootView, id);
      if (closeButton == null) {
        break missingId;
      }

      id = R.id.color_value;
      TextView colorValue = ViewBindings.findChildViewById(rootView, id);
      if (colorValue == null) {
        break missingId;
      }

      id = R.id.description;
      EditText description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.good_habit_button;
      RadioButton goodHabitButton = ViewBindings.findChildViewById(rootView, id);
      if (goodHabitButton == null) {
        break missingId;
      }

      id = R.id.habits_name;
      EditText habitsName = ViewBindings.findChildViewById(rootView, id);
      if (habitsName == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.radio_group;
      RadioGroup radioGroup = ViewBindings.findChildViewById(rootView, id);
      if (radioGroup == null) {
        break missingId;
      }

      id = R.id.repeat_times;
      TextView repeatTimes = ViewBindings.findChildViewById(rootView, id);
      if (repeatTimes == null) {
        break missingId;
      }

      id = R.id.repetition_period;
      Spinner repetitionPeriod = ViewBindings.findChildViewById(rootView, id);
      if (repetitionPeriod == null) {
        break missingId;
      }

      id = R.id.repetition_times;
      EditText repetitionTimes = ViewBindings.findChildViewById(rootView, id);
      if (repetitionTimes == null) {
        break missingId;
      }

      id = R.id.save_button;
      Button saveButton = ViewBindings.findChildViewById(rootView, id);
      if (saveButton == null) {
        break missingId;
      }

      id = R.id.spinner_priority;
      Spinner spinnerPriority = ViewBindings.findChildViewById(rootView, id);
      if (spinnerPriority == null) {
        break missingId;
      }

      id = R.id.title_is_required_message;
      TextView titleIsRequiredMessage = ViewBindings.findChildViewById(rootView, id);
      if (titleIsRequiredMessage == null) {
        break missingId;
      }

      return new FragmentHabitEditingBinding((ConstraintLayout) rootView, badHabitButton,
          closeButton, colorValue, description, goodHabitButton, habitsName, linearLayout,
          radioGroup, repeatTimes, repetitionPeriod, repetitionTimes, saveButton, spinnerPriority,
          titleIsRequiredMessage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
