// Generated by view binder compiler. Do not edit!
package com.example.habitstracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.habitstracker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentColorPickerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout colorPalette;

  @NonNull
  public final TextView hexValue;

  @NonNull
  public final TextView hsvValue;

  @NonNull
  public final Button resetColor;

  @NonNull
  public final TextView rgbValue;

  @NonNull
  public final Button saveColor;

  @NonNull
  public final ImageView selectedColor;

  private FragmentColorPickerBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout colorPalette, @NonNull TextView hexValue, @NonNull TextView hsvValue,
      @NonNull Button resetColor, @NonNull TextView rgbValue, @NonNull Button saveColor,
      @NonNull ImageView selectedColor) {
    this.rootView = rootView;
    this.colorPalette = colorPalette;
    this.hexValue = hexValue;
    this.hsvValue = hsvValue;
    this.resetColor = resetColor;
    this.rgbValue = rgbValue;
    this.saveColor = saveColor;
    this.selectedColor = selectedColor;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentColorPickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentColorPickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_color_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentColorPickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.color_palette;
      LinearLayout colorPalette = ViewBindings.findChildViewById(rootView, id);
      if (colorPalette == null) {
        break missingId;
      }

      id = R.id.hex_value;
      TextView hexValue = ViewBindings.findChildViewById(rootView, id);
      if (hexValue == null) {
        break missingId;
      }

      id = R.id.hsv_value;
      TextView hsvValue = ViewBindings.findChildViewById(rootView, id);
      if (hsvValue == null) {
        break missingId;
      }

      id = R.id.reset_color;
      Button resetColor = ViewBindings.findChildViewById(rootView, id);
      if (resetColor == null) {
        break missingId;
      }

      id = R.id.rgb_value;
      TextView rgbValue = ViewBindings.findChildViewById(rootView, id);
      if (rgbValue == null) {
        break missingId;
      }

      id = R.id.save_color;
      Button saveColor = ViewBindings.findChildViewById(rootView, id);
      if (saveColor == null) {
        break missingId;
      }

      id = R.id.selected_color;
      ImageView selectedColor = ViewBindings.findChildViewById(rootView, id);
      if (selectedColor == null) {
        break missingId;
      }

      return new FragmentColorPickerBinding((LinearLayout) rootView, colorPalette, hexValue,
          hsvValue, resetColor, rgbValue, saveColor, selectedColor);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
